syntax = "proto3";
package api;

// A proof of space data creation service
// todo: support configuration with only a subset of system supported providers.

service PosDataService {

  rpc GetProviders(GetProvidersRequest) returns (GetProvidersResponse);

  // Set service configuration
  // Important: Don't set the config while there are jobs running or queued to run.
  // Config before starting jobs or wait until all jobs have stopped before changing the config.
  // todo: support removing one or more supported system compute providers from the providers pool.
  // for example, a laptop may have a supported Intel internal gpu which is very slow and user
  // might want to use the 2nd laptop integral AMD/Nvidia gpu which has strong performance.
  rpc SetConfig(SetConfigRequest) returns (SetConfigResponse);

  // Get service current configuration
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse);

  // Add a new post job
  rpc AddJob(AddJobRequest) returns (AddJobResponse);

  // Get current job status
  rpc GetJobStatus(GetJobStatusRequest) returns (GetJobStatusResponse);

  // Get all jobs statuses
  rpc GetAllJobsStatuses(GetAllJobsStatusRequest) returns (GetAllJobsStatusResponse);

  // Abort ajJob or abort all Jobs and optionally delete them
  rpc AbortJob(AbortJobRequest) returns (AbortJobResponse);

  // Subscribe to stream of job status updates for a specific job or for all jobs
  rpc SubscribeJobStatusStream(JobStatusStreamRequest) returns (stream JobStatusStreamResponse);
}

// Service configuration
message Config {
  // The directory where pos data files are created
  // Path must be accessible by the server
  string data_dir = 1;
  uint64 indexes_per_compute_cycle = 2; // number of indexes to compute per gpu compute cycle. e.g. 1024^4
  uint32 bits_per_index = 3; // should be 8 for now
  bytes  salt = 4; // scrypt salt
  uint32 N = 5; // scrypt param
  uint32 R = 6; // scrypt param
  uint32 P = 7; // scrypt param
  bytes  D = 8; // target difficulty, 32 bytes
}

// A pos compute provider such as a GPU or a CPU
message Provider {
  uint32 id = 1;
  string model = 2;
  enum Class {
    CUDA = 0;
    VULKAN = 1;
    X86 = 2;
  }
  Class class = 3;
}

message GetProvidersRequest {
}

message GetProvidersResponse {
  repeated Provider providers = 1;
}

message GetConfigRequest {
}

message GetConfigResponse {
  Config config = 1;
}

message SetConfigRequest {
  Config config = 1;
}

message SetConfigResponse {
}

message JobStatusStreamRequest {
  uint64 id = 1; // pass 0 to get status of all jobs. Set to Job id to receive status just for that job
}

message JobStatusStreamResponse {
  Job Job = 1;
}

// A proof of space data creation job
message Job {
  enum JobStatus {
    QUEUED = 0; // queued as all provides are busy with other Jobs
    STARTED = 1; // started
    STOPPED = 2; // stopped due to an error or user stopped
    COMPLETED = 3; // Job completed
  }

  uint64 id = 1; // unique job id generated by the service
  uint64 bits_written = 2; // bits written to the data file (at dir/id.post) (each index 1 byte)
  uint64 size_bits = 3; // final requested size in bits
  uint64 started = 5; // time execution started
  uint64 submitted = 6; // time submitted
  uint64 stopped = 7; // time execution completed or stopped due to error
  JobStatus status = 8; // job's status
  JobError last_error = 10; // last error string if job stopped due to an error or empty otherwise
  string friendly_name = 11; // client provided friendly name e.g. 'my pos 1'
  bytes  client_id = 12; // unique client id (input to pos algorithm)
  uint64 proof_of_work_index = 13; // index of the pow solution index. Only available for complete jobs
  uint32 compute_provider_id = 14; // compute provider processor id which executed this job - useful for debugging when job fail
}

message JobError {
  enum Error {
    UNKNOWN = 0;
    IO_ERROR = 1;
    GPU_COMPUTE_ERROR = 2;
  }
  Error error = 1;
  string message = 2;
}

message AbortJobRequest {
  uint64 id = 1; // pass 0 to abort ALL jobs
  bool delete_Job = 2; // delete the job from the service
  bool delete_data = 3; // delete job data files in store (best effort)
}

message AbortJobResponse {
  // status
}

message GetAllJobsStatusRequest {

}

message GetAllJobsStatusResponse {
  repeated Job Jobs = 1;
}

message GetJobStatusRequest {
  uint64 id = 1;
}

message GetJobStatusResponse {
  Job Job = 1;
}

message AddJobRequest {
  bytes  client_id = 1; // unique client id (input to pos algo)
  uint64 post_size_bits = 2; // requested pos size in bits
  uint64 start_index = 3; // optional start index - used to continue a stopped job
  string friendly_name = 4; // a name set by client to identify the job
}

message AddJobResponse {
  Job Job = 1;
}
