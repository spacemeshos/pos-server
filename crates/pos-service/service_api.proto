syntax = "proto3";
package sm.post_server;

// A proof of space data creation service
service PosDataService {

  // Set service global config
  rpc SetConfig(SetConfigRequest) returns (SetConfigResponse);

  // Get service global config
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse);

  // Add a new post Job
  rpc AddJob(AddJobRequest) returns (AddJobResponse);

  // Get current Job status
  rpc GetJobStatus(GetJobStatusRequest) returns (GetJobStatusResponse);

  // Get all Jobs statuses
  rpc GetAllJobsStatuses(GetAllJobsStatusRequest) returns (GetAllJobsStatusResponse);

  // Abort a Job or abort all Jobs and optionally delete them
  rpc AbortJob(AbortJobRequest) returns (AbortJobResponse);

  // Subscribe to stream of Job status updates for a specific Job or for all Jobs
  rpc SubscribeJobStatusStream(JobStatusStreamRequest) returns (stream JobStatusStreamResponse);
}

// Service global configuration
message Config {
  string data_dir = 1;
  // add all other configs here
  uint64 indexes_per_compute_cycle = 2; // number of indexes to compute per gpu compute cycle. e.g. 1024^4
  uint32 bits_per_index = 3; // should be 8 for now
  bytes  salt = 4; // scrypt salt
}

message GetConfigRequest {
}

message GetConfigResponse {
  Config config = 1;
}

message SetConfigRequest {
  Config config = 1;
}

message SetConfigResponse {
  // status code
}

message JobStatusStreamRequest {
  uint64 id = 1; // pass 0 to get status of all Jobs. Set to Job id to receive status just for that Job
}

message JobStatusStreamResponse {
  Job Job = 1;
}

// A proof of space generation Job
message Job {
  enum JobStatus {
    QUEUED = 0; // queued as all provides are busy with other Jobs
    STARTED = 1; // started
    STOPPED = 2; // stopped due to an error or user stopped
    COMPLETED = 3; // Job completed
  }

  uint64 id = 1; // unique Job id generated by the service
  uint64 bytes_written = 2; // bytes written to the data file (at dir/id.post) (each index 1 byte)
  uint64 size = 3; // final requested size in bytes
  uint64 started = 5; // time execution started
  uint64 submitted = 6; // time submitted
  uint64 stopped = 7; // time execution completed or stopped due to error
  JobStatus status = 8;
  JobError last_error = 10; // last error string if Job stopped or empty
  string friendly_name = 11; // client provided friendly name
  bytes  client_id = 12; // unique client id (input to post)
  uint64 proof_of_work_index = 13; // index of the pow solution index (only for complete Jobs
  uint32 compute_provider_id = 14; // compute provider processor id which executed this Job - useful for debugging when Jobs fail
}

message JobError {
  enum Error {
    UNKNOWN = 0;
    IO_ERROR = 1;
    GPU_COMPUTE_ERROR = 2;
  }
  Error error = 1;
  string message = 2;
}

message AbortJobRequest {
  uint64 id = 1; // pass 0 to abort ALL Jobs
  bool delete_Job = 2; // delete the Job from the service
  bool delete_date =3; // set to true to delete job data in store (best effort)
}

message AbortJobResponse {
  // status
}

message GetAllJobsStatusRequest {

}

message GetAllJobsStatusResponse {
  repeated Job Job = 1;
}

message GetJobStatusRequest {
  uint64 id = 1;
}

message GetJobStatusResponse {
  Job Job = 1;
}

message AddJobRequest {
  bytes  client_id = 1; // unique client id (input to post)
  uint64 post_size = 2; // requested post size in bytes
  uint64 start_index = 3; // optional start index - used continue stopped Jobs when impl supports it
  string friendly_name = 4; // friendly name set by client to identify Job later
}

message AddJobResponse {
  Job Job = 1;
}
